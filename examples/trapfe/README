This example demonstrates the use of the libtrapfe.a library.  The trapfe
library enables trapping floating point exceptions (FPE) that often cause problems
in computational code.  This library allows code to be executed without
alteration but stalls the program as soon as a FPE is met.

To use the trapfe library, you simply have to link the library at compile
time.  It is also necessary to not perform any optimizations and use the '-g'
compile flag.  This is for two reasons:  first, the compilers that I've used
disable the trapping of the FPE if any optimization is used or if '-g' is not
used; second, if you are debugging, you will most likely want to attach with a
debugger and see where there FPE was trapped.  

Doing 'make' in this directory will build two versions of a program which
causes a FPE by dividing by zero:
    testtrapfe_opt:
        Compiled with '$(OPTIM_CXX)' and linked by '-ltrapfe'.
        Causes FPE but does not trap FPE.  The program will continue without
        stopping.

    testtrapfe_debug:
        compiled with '-g' (and no optimization) and linked by '-ltrapfe'
        causes FPE and does trap FPE.  The program will emit an error and go
        into an infinite loop, waiting for you to investigate its cause with a
        debugger. 

